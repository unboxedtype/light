%{
open ParserModule
open LHExpr
open FSharp.Text.Parsing
open LHTypes
// EFunc of arg:(Name*option<Type>) * body:Expr
// [("x",None),("y",Some Int 256)], body ->
//   --> EFunc (("x",None), EFunc (("y", Some Int 256), ...))
// [], body ->
//   --> body
let rec unfoldFunction argsTypes body =
    match argsTypes with
    | [] -> body
    | (name, typ) :: t -> mkAST (EFunc ((name, typ), unfoldFunction t body))


let mutable tVar = 0
let genTVar () : string =
    tVar <- tVar + 1
    "x" + (string tVar)

// We have a separate counter for 'fun's
// for making tests easier to write
let mutable funVar = 0
let genFunVar () : string =
    funVar <- funVar + 1
    "fun" + (string funVar)

let resetFunVar () =
    funVar <- 0

%}

%start start

%token NOT
%token <int> NUM
%token <string> UIDENT
%token <string> LIDENT
%token <string> IDENT
%token <string> STRING
%token <TVM.Instruction> TVMI
%token BOOL INT UINT UINT32 UNIT VMCELL VMSLICE STRINGT
%token TRUE FALSE
%token DSCOLON
%token MODULE TYPEDEF OF IF THEN ELSE HANDLER LET RECURSIVE IN
%token EQ GT LT GTEQ LTEQ PLUS MINUS SEMICOLON VBAR STAR COLON COMMA EOF
%token LBRACE RBRACE LPAREN RPAREN RARROW LARROW
%token MATCH WITH UNDERSCORE DOT FAILWITH ASM
%token TYPECAST
%token FUNC

%nonassoc IN
%right prec_let
%right SEMICOLON
%left STAR
%nonassoc prec_tuple
%left COMMA
%left EQ GT LESS GTEQ LTEQ
%left PLUS MINUS
%left prec_app
%left DOT

%type <option<Module>> start

%%

start:
  | EOF { None }
  | modle { Some $1 }

// =================================================
// Single typed variable declaration.
// "x : int", "ud : UserData"
// =================================================
baseType:
  | INT       { (Int 256) }
  | UINT      { (UInt 256) }
  | UINT32    { (UInt 32)  }
  | BOOL      { Bool }
  | VMCELL    { VMCell  }
  | VMSLICE   { VMSlice }
  | UNIT      { Unit   }
  | STRINGT   { String }

ident:
  | LIDENT  { $1 }
  | UIDENT  { $1 }

typ:
  | baseType  { $1 }
  | ident     { UserType ($1, None) }  // user-defined type
  | typ RARROW typ { Function ($1, $3) }
  | LPAREN typ RPAREN { $2 }
  | LPAREN star_typs RPAREN { Tuple $2 }
  | star_typs { Tuple $1 }

star_typs:
  | typ STAR typ        { [$1; $3] }
  | star_typs STAR typ  { $1 @ [$3] }

typs:
  | typ       { [$1] }
  | typ typs  { $1 :: $2 }

// =================================================
// Multiple typed variable declarations, separated by a semicolon.
// Used in Record definitions.
// "x : int; ud: UserData"
// =================================================
typedVarDecl:
  | ident COLON typ   { ($1, $3) }
typedVarDeclsSemicolon:
  | typedVarDecl { [$1] }
  | typedVarDecl SEMICOLON typedVarDeclsSemicolon  { $1 :: $3 }

recordDecl:
  | LBRACE typedVarDeclsSemicolon RBRACE  { Record $2 }

ADTCtor:
  | VBAR ident { ($2, None) } // constructor may have no arguments
  | VBAR ident OF typ { ($2, Some $4) }
ADTCtors:
  | ADTCtor  { [$1] }
  | ADTCtor ADTCtors { $1 :: $2 }
ADTDecl:
  | ADTCtors { ADT $1 }

// =================================================
// Function and Handler declaration argument
// "(x:int)" "y" "()"
// =================================================
funcArg:
   | ident                         { ($1, None) }
   | LPAREN RPAREN                 { ("", Some Unit) }
   | ident COLON typ               { ($1, Some $3) }
   | LPAREN ident COLON typ RPAREN { ($2, Some $4) }
funcArgs:
   | { [] }
   | funcArg funcArgs { $1 :: $2 }


asmInstructions:
   | TVMI { [$1] }
   | TVMI DSCOLON asmInstructions { [$1] @ $3 }

// ex.varEquation
recordConstrVar:
   | ident EQ expr  { ($1, $3) }
recordConstrVars:
   | recordConstrVar { [$1] }
   | recordConstrVar SEMICOLON recordConstrVars { $1 :: $3 }

basicExpr:
  | LPAREN expr RPAREN
    { $2 }
  | LPAREN RPAREN
    { mkAST ENull }   // Unit
  | TRUE
    { mkAST (EBool true) }
  | FALSE
    { mkAST (EBool false) }
  | NUM
    { mkAST (ENum ( $1 |> int )) }
  | STRING
    { mkAST (EStr $1) }
  | LIDENT
    { mkAST (EVar $1) }
  | basicExpr DOT LIDENT
  {
    // Here, we shall translate the field identifier into its index.
    // This is done after the type of the field $1 is known.
    let left = $1
    let right = mkAST (EVar $3)
    mkAST (ESelect (left, right))
  }

expr:
  | basicExpr
     { $1 }

  | NOT expr
    %prec prec_app
     { mkAST (ENot $2) }

  | expr TYPECAST typ
     { mkAST (ETypeCast ($1, $3)) }

  | expr PLUS expr
     { mkAST (EAdd ($1, $3)) }

  | expr MINUS expr
     { mkAST (ESub ($1, $3)) }

  | expr STAR expr
     { mkAST (EMul ($1, $3)) }

  | expr EQ expr
     { mkAST (EEq ($1, $3))  }

  | expr LT expr
     { mkAST (ELt ($1, $3)) }

  | expr GT expr
     { mkAST (EGt ($1, $3))  }

  | expr GTEQ expr
     { mkAST (EGtEq ($1, $3))  }

  | expr LTEQ expr
     { mkAST (ELtEq ($1, $3))  }

  | IF expr THEN expr ELSE expr
     { mkAST (EIf ($2, $4, $6)) }

  | FUNC funcArgs RARROW expr
  {
    // fun x (y:T) -> funBody
    // --> let <freshVar> x (y:T) = funBody in <freshVar>
    let funId = genFunVar ()
    let args = $2
    mkAST (ELet (funId, unfoldFunction args $4, mkAST (EVar funId)))
  }

  | LET ident EQ expr IN expr
    %prec prec_let
     { mkAST (ELet ($2, $4, $6)) }

  | LET ident funcArgs EQ expr IN expr
    %prec prec_let
     { mkAST (ELet ($2, unfoldFunction $3 $5, $7)) }

  | LET RECURSIVE ident funcArgs EQ expr IN expr
    %prec prec_let
     {  mkAST (ELetRec ($3, unfoldFunction $4 $6, $8))  }

  | basicExpr actualArguments
    %prec prec_app
  {
    // func a1 a2 a3 --> EAp (EAp (a1, a2), a3)
    List.fold ( fun acc expr -> mkAST (EAp (acc, expr)) ) $1 $2
  }

  | elems
    %prec prec_tuple
  { mkAST (ETuple $1) }

  // LET TUPLE has to be here

  | expr SEMICOLON expr
      { mkAST (ELet (genTVar(), $1, $3)) }

  | LBRACE recordConstrVars RBRACE
      { mkAST (ERecord $2) }

  | FAILWITH expr
  {
     match ($2.Expr) with
     | ENum n ->
         mkAST (EFailWith n)
     | _ ->
         failwith "failwith requires integer value as parameter"
  }

  | ASM asmInstructions
  {
     mkAST (EAsm $2)
  }

  // | expr LARROW expr
  //{
  //  if ($1).Expr = (EVar "state") then mkAST (EAssign ($3))
  //  else failwith "assignment operator is permited only for 'state' variable currently"
  //}



actualArguments:
  | actualArguments basicExpr
    %prec prec_app
    { $1 @ [$2] }
  | basicExpr
    %prec prec_app
    { [$1] }

elems:
| elems COMMA expr    { $1 @ [$3] }
| expr COMMA expr     { [$1; $3]  }

// =================================================
// Declaration is one of the following:
//  * datatype definition
//  * handler definition
//  * let binding
// =================================================
decl:
  | TYPEDEF UIDENT EQ recordDecl
  { TypeDef ($2, $4) }

  | TYPEDEF UIDENT EQ ADTDecl
  { TypeDef ($2, $4) }

  | HANDLER LIDENT funcArgs EQ expr
  {
      HandlerDef ($2, $3, $5)
  }

  | LET LIDENT funcArgs EQ expr DSCOLON
  {
    LetBinding ($2, $3, false, unfoldFunction $3 $5)
  }

  | LET RECURSIVE LIDENT funcArgs EQ expr DSCOLON
  {
    LetBinding ($3, $4, true, unfoldFunction $4 $6)
  }


// List of declarations
decls:
  | { [] }
  | decl decls    { $1 :: $2 }

// Module is a named list of declarations.
modle:
  | MODULE ident decls { Module ($2, $3) }

