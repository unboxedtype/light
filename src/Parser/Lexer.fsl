{
module Lexer

open FSharp.Text.Lexing
open System
open Parser

exception SyntaxError of string

let lexeme = LexBuffer<_>.LexemeString

let newline (lexbuf: LexBuffer<_>) =
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
  lexbuf.EndPos <- lexbuf.EndPos.AsNewLinePos()

let mutable pushInt = false
let mutable tuple = false
}

let int = ['-' '+']? ['0'-'9']+
let digit = ['0'-'9']
let ucase = ['A'-'Z']
let lcase = ['a'-'z']
let ucaseIdentifier = ucase (lcase | digit | ucase | '_' | '\'' )*
let lcaseIdentifier = lcase (ucase | digit | lcase | '_' | '\'' )*
let identifier = lcaseIdentifier | ucaseIdentifier
let string = '\"' (lcase)* '\"'
let white = [' ' '\t']
let newline = '\r' | '\n' | "\r\n"

rule read =
  parse
  | white+    { read lexbuf }
  | "(*"      { comment lexbuf; read lexbuf }
  | newline  { newline lexbuf; read lexbuf }
  | '('      { LPAREN }
  | ')'      { RPAREN }
  | "true"   { TRUE }
  | "false"  { FALSE }
  | "not"    { NOT }
  | int      { let n = int (lexeme lexbuf) in
               if pushInt = true then
                  (pushInt <- false ; TVMI (TVM.PushInt n))
               elif tuple = true then
                  (tuple <- false ; TVMI (TVM.Tuple n))
               else NUM n }
  | ":>"     { TYPECAST }
  | ";;"     { DSCOLON }
  | "->"     { RARROW  }  // function type
  | "<-"     { LARROW  }  // assignment operator
  | '{'      { LBRACE }
  | '}'      { RBRACE }
  | '|'      { VBAR }
  | ':'      { COLON }
  | '.'      { DOT }
  | '*'      { STAR }
  | ','      { COMMA }
  | ';'      { SEMICOLON }
  | '='      { EQ }
  | '+'      { PLUS }
  | '-'      { MINUS }
  | "<="     { LTEQ }
  | ">="     { GTEQ }
  | '<'      { LT }
  | '>'      { GT }
  | '_'      { UNDERSCORE }
  | '"'      { read_string "" false lexbuf }
  | "assembly" { ASM }
  | "INC"    { TVMI (TVM.Inc) }
  | "DEC"    { TVMI (TVM.Dec) }
  | "NEWC"   { TVMI (TVM.Newc) }
  | "ENDC"   { TVMI (TVM.Endc) }
  | "POPCTR c4" { TVMI (TVM.PopCtr 4) }
  | "PUSHCTR c4" { TVMI (TVM.PushCtr 4) }
  | "ACCEPT" { TVMI (TVM.Accept) }
  | "NULL"
  | "PUSHNULL" { TVMI (TVM.PushNull) }
  | "PUSHINT"  { pushInt <- true; read lexbuf }
  | "TUPLE"  { tuple <- true; read lexbuf }
  | "contract" { MODULE }
  | "type"   { TYPEDEF }
  | "of"     { OF }
  | "handler" { HANDLER }
  | "if"     { IF }
  | "then"   { THEN }
  | "else"   { ELSE }
  | "let"    { LET }
  | "fun"    { FUNC }
  | "rec"    { RECURSIVE }
  | "in"     { IN }
  | "match"  { MATCH }
  | "with"   { WITH }
  | "failwith" { FAILWITH }
  | "int" { INT }
  | "uint"   { UINT }
  | "uint32" { UINT32 }  // yes, I know. Just a quick dirty hack.
  | "string" { STRINGT }
  | "ActorId" { UINT }
  | "bool" { BOOL }
  | "unit" { UNIT }
  | "VMCell" { VMCELL }
  | "VMSlice" { VMSLICE }
  | ucaseIdentifier  { UIDENT (string (lexeme lexbuf)) }
  | lcaseIdentifier  { LIDENT (string (lexeme lexbuf)) }
//  | identifier { IDENT (string (lexeme lexbuf)) }
  | eof      { EOF }
  | _
     {
      raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' Line: %d Column: %d"
                           (lexeme lexbuf)
                           (lexbuf.StartPos.Line+1)
                           lexbuf.StartPos.Column))
     }
and read_string str ignorequote =
  parse
  | '"'           { if ignorequote  then (read_string (str+"\\\"") false lexbuf) else STRING (str) }
  | '\\'          { read_string str true lexbuf }
  | [^ '"' '\\']+ { read_string (str+(lexeme lexbuf)) false lexbuf }
  | eof           { raise (Exception ("String is not terminated")) }
and comment = parse
  | "*)"
    { () }
  | "(*"
    { comment lexbuf;
      comment lexbuf }
  | eof
    { printf "Warning: unterminated comment." }
  | _
    { comment lexbuf }
